services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: ${MYSQL_CONTAINER}
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/force-init.sh:/docker-entrypoint-initdb.d/force-init.sh
      - mysql_data:/var/lib/mysql
    networks:
      - homeserver-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    command: ["bash", "/docker-entrypoint-initdb.d/force-init.sh"]

  # Java Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ${BACKEND_CONTAINER}
    ports:
      - "${BACKEND_PORT}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: ${BACKEND_SPRING_PROFILE}
      SPRING_DATASOURCE_URL: ${DB_URL}
      SPRING_DATASOURCE_USERNAME: ${DB_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: ${DB_DRIVER}
      SPRING_JPA_DATABASE_PLATFORM: ${JPA_DIALECT}
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${JPA_DDL_AUTO:-update}
      SPRING_JPA_SHOW_SQL: ${JPA_SHOW_SQL}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${MANAGEMENT_ENDPOINTS}
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: ${MANAGEMENT_HEALTH_DETAILS}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL}
      # Admin bootstrap & invite code config
      INITIAL_ADMIN_USERNAME: ${ADMIN_USERNAME:-}
      INITIAL_ADMIN_EMAIL: ${ADMIN_EMAIL:-}
      INITIAL_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-}
      ADMIN_SECRET: ${ADMIN_SECRET:-changeme}
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - homeserver-network

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ${FRONTEND_CONTAINER}
    ports:
      - "${FRONTEND_PORT}:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_API_BASE_PATH: ${NEXT_PUBLIC_API_BASE_PATH}
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED}
      NODE_ENV: ${NODE_ENV}
      HOSTNAME: ${HOSTNAME}
      PORT: 3000
    depends_on:
      - backend
    networks:
      - homeserver-network

volumes:
  mysql_data:

networks:
  homeserver-network:
    driver: bridge
