name: Unified CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    # Service containers to run with the job
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'homeserver' }}
          MYSQL_USER: ${{ secrets.MYSQL_USER || 'homeserver_app' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'test_password_123' }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'root_password_123' }}
        ports:
          - 3306:3306
        # Set health checks to wait until mysql has started
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      # Application configuration for testing
      SPRING_PROFILES_ACTIVE: ci
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/${{ secrets.MYSQL_DATABASE || 'homeserver' }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER || 'homeserver_app' }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'test_password_123' }}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: true
      JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_jwt_secret_for_ci_must_be_at_least_256_bits_long_abcdefghijklmnopqrstuvwxyz123456' }}
      JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION || '86400000' }}
      SERVER_PORT: 8080

      # Test configuration
      CI_ENVIRONMENT: "true"
      SERVER_URL: http://localhost:8080/actuator/health
      MAX_WAIT_SECONDS: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install MySQL Client
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq mysql-client

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1" >/dev/null 2>&1; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Make scripts executable
        run: |
          chmod +x run-test.sh tests/**/*.sh

      - name: Verify Environment Setup
        run: |
          echo "=== Environment ==="
          echo "Java version:"
          java -version
          echo "Maven version:"
          mvn --version
          echo "MySQL connection test:"
          mysql -h 127.0.0.1 -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 'Connection successful'" ${{ secrets.MYSQL_DATABASE || 'homeserver' }}

      - name: Run Backend Tests
        run: ./run-test.sh

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Run TypeScript type check
        working-directory: frontend
        run: npm run type-check
        continue-on-error: true

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    env:
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      NEXT_PUBLIC_ADMIN_SECRET: ${{ secrets.NEXT_PUBLIC_ADMIN_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright
        working-directory: frontend
        run: npx playwright install

      - name: Start the application stack
        run: |
          docker compose up -d

          # Wait for services to be ready
          sleep 30

      - name: Start frontend server
        working-directory: frontend
        run: |
          # Start the frontend server in the background
          npm start &
          FRONTEND_PID=$!
          echo "Frontend server started with PID: $FRONTEND_PID"
          
          # Wait for frontend to be ready
          echo "Waiting for frontend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "Frontend server is ready!"
              break
            fi
            echo "Waiting for frontend server... ($i/30)"
            sleep 2
          done
          
          # Store PID for cleanup
          echo $FRONTEND_PID > /tmp/frontend.pid

      - name: Run frontend integration tests
        working-directory: frontend
        run: |
          # Make test scripts executable
          chmod +x ../tests/frontend/*.sh

          # Run frontend tests
          for test in ../tests/frontend/*.sh; do
            echo "Running $test"
            bash "$test"
          done

      - name: Stop frontend server
        if: always()
        run: |
          if [[ -f /tmp/frontend.pid ]]; then
            FRONTEND_PID=$(cat /tmp/frontend.pid)
            echo "Stopping frontend server with PID: $FRONTEND_PID"
            kill $FRONTEND_PID 2>/dev/null || true
            rm -f /tmp/frontend.pid
          fi

      - name: Run Playwright tests
        working-directory: frontend
        run: npx playwright test
        continue-on-error: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: docker compose down -v

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    env:
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      NEXT_PUBLIC_ADMIN_SECRET: ${{ secrets.NEXT_PUBLIC_ADMIN_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Start application
        working-directory: frontend
        run: |
          npm start &
          sleep 10

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: "./frontend/lighthouserc.js"
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
