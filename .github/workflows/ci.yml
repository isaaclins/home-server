name: Home Server CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build main Docker image
        run: docker build -t home-server-image .

      - name: Build test runner Docker image
        run: docker build -t home-server-test-runner -f Dockerfile.test .

      - name: Run tests in Docker container
        run: |
          echo "Starting test runner container..."
          # We need to map the same ports as before if run-setup.sh tries to bind to them,
          # even if we don't access them from the host directly in this step.
          # The tests run internally via localhost:port in the container.
          # The --init flag helps with signal handling for the entrypoint script.
          # We also give it a name for easier log retrieval if needed, though the run command itself will show logs.
          docker run --name home-server-ci-tests --init -p 3000:3000 -p 3002:3002 home-server-test-runner

          # The job will fail if the `docker run` command above fails (i.e., test script exits with non-zero)
          echo "Test runner container finished."

      - name: Display Docker logs on failure (if any)
        if: failure()
        run: |
          echo "CI job failed. Displaying logs from test runner container (if it exists)..."
          docker logs home-server-ci-tests || echo "Could not retrieve logs for home-server-ci-tests."

      - name: Clean up test runner Docker container
        if: always() # Ensure cleanup even if steps fail
        run: docker rm -f home-server-ci-tests || true
