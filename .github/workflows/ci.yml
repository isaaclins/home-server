name: Unified CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE: ${{ github.repository }}

jobs:
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend,${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload image info
        uses: actions/upload-artifact@v4
        with:
          name: image-info
          path: |
            backend-image:${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend:${{ github.sha }}
            frontend-image:${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-frontend:${{ github.sha }}

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: build-images

    # Service containers to run with the job
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'homeserver' }}
          MYSQL_USER: ${{ secrets.MYSQL_USER || 'homeserver_app' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'test_password_123' }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'root_password_123' }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    env:
      # Application configuration for testing
      SPRING_PROFILES_ACTIVE: ci
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/${{ secrets.MYSQL_DATABASE || 'homeserver' }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER || 'homeserver_app' }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'test_password_123' }}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: true
      JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_jwt_secret_for_ci_must_be_at_least_256_bits_long_abcdefghijklmnopqrstuvwxyz123456' }}
      JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION || '86400000' }}
      SERVER_PORT: 8080
      ADMIN_SECRET: ${{ secrets.ADMIN_SECRET || 'changeme' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build backend image locally (for PRs)
        if: github.event_name == 'pull_request'
        run: |
          # For PRs, build locally since images aren't pushed
          docker build -t homeserver-backend:test ./backend

      - name: Pull backend image (for non-PRs)
        if: github.event_name != 'pull_request'
        run: |
          # Pull the built image from registry
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend:${{ github.sha }}

      - name: Install MySQL Client
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq mysql-client

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1" >/dev/null 2>&1; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Setup MySQL user with proper authentication
        run: |
          echo "Setting up MySQL user with proper authentication..."
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD || 'root_password_123' }} << EOF
          CREATE USER IF NOT EXISTS '$SPRING_DATASOURCE_USERNAME'@'%' IDENTIFIED WITH mysql_native_password BY '$SPRING_DATASOURCE_PASSWORD';
          GRANT ALL PRIVILEGES ON ${{ secrets.MYSQL_DATABASE || 'homeserver' }}.* TO '$SPRING_DATASOURCE_USERNAME'@'%';
          FLUSH PRIVILEGES;
          EOF

      - name: Test database connectivity
        run: |
          # Get the MySQL service container name
          MYSQL_CONTAINER=$(docker ps --filter "ancestor=mysql:8.0" --format "{{.Names}}" | head -1)
          echo "Testing connection to MySQL container: $MYSQL_CONTAINER"

          # Test connection from host
          echo "Testing connection from host:"
          mysql -h 127.0.0.1 -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1 as test_connection;"

          # Test connection from a temporary container on the same network
          echo "Testing connection from container network:"
          docker run --rm --network $(docker inspect $MYSQL_CONTAINER --format='{{range $net, $config := .NetworkSettings.Networks}}{{$net}}{{end}}') \
            mysql:8.0 mysql -h $MYSQL_CONTAINER -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1 as test_connection;"

      - name: Start backend container
        run: |
          # Start the backend container using the appropriate image
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            IMAGE_NAME="homeserver-backend:test"
          else
            IMAGE_NAME="${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend:${{ github.sha }}"
          fi

          echo "Starting backend container with image: $IMAGE_NAME"

          # Get the MySQL service container name
          MYSQL_CONTAINER=$(docker ps --filter "ancestor=mysql:8.0" --format "{{.Names}}" | head -1)
          echo "MySQL container name: $MYSQL_CONTAINER"

          # Connect to the same network as MySQL service
          MYSQL_NETWORK=$(docker inspect $MYSQL_CONTAINER --format='{{range $net, $config := .NetworkSettings.Networks}}{{$net}}{{end}}')
          echo "MySQL network: $MYSQL_NETWORK"

          docker run -d \
            --name backend-test \
            --network $MYSQL_NETWORK \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://$MYSQL_CONTAINER:3306/${{ secrets.MYSQL_DATABASE || 'homeserver' }} \
            -e SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME \
            -e SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD \
            -e SPRING_DATASOURCE_DRIVER_CLASS_NAME=$SPRING_DATASOURCE_DRIVER_CLASS_NAME \
            -e SPRING_JPA_DATABASE_PLATFORM=$SPRING_JPA_DATABASE_PLATFORM \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=$SPRING_JPA_HIBERNATE_DDL_AUTO \
            -e SPRING_JPA_SHOW_SQL=$SPRING_JPA_SHOW_SQL \
            -e JWT_SECRET=$JWT_SECRET \
            -e JWT_EXPIRATION=$JWT_EXPIRATION \
            -e SERVER_PORT=$SERVER_PORT \
            -e ADMIN_SECRET=$ADMIN_SECRET \
            $IMAGE_NAME

          # Check container status
          echo "Container status:"
          docker ps -a

          # Show container logs if it's not running
          if ! docker ps | grep -q backend-test; then
            echo "Container failed to start. Logs:"
            docker logs backend-test
            exit 1
          fi

          # Wait for backend to be ready
          echo "Waiting for backend to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting for backend... ($i/60)"
            # Show logs every 10 attempts
            if [ $((i % 10)) -eq 0 ]; then
              echo "Recent container logs:"
              docker logs --tail 20 backend-test
            fi
            sleep 2
          done

          # Final check - if still not ready, show logs and fail
          if ! curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
            echo "Backend failed to start. Final logs:"
            docker logs backend-test
            exit 1
          fi

      - name: Make scripts executable
        run: |
          chmod +x tests/**/*.sh

      - name: Run Backend Tests
        run: |
          # Run backend tests against the containerized application
          for test in tests/backend/*.sh; do
            echo "Running $test"
            ADMIN_SECRET="$ADMIN_SECRET" bash "$test"
          done

      - name: Cleanup
        if: always()
        run: |
          # Stop and remove backend container
          docker stop backend-test 2>/dev/null || true
          docker rm backend-test 2>/dev/null || true

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: build-images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      - name: Run TypeScript type check
        working-directory: frontend
        run: npm run type-check
        continue-on-error: true

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-images, backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'

    # Service containers to run with the job
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE || 'homeserver' }}
          MYSQL_USER: ${{ secrets.MYSQL_USER || 'homeserver_app' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'test_password_123' }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD || 'root_password_123' }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --default-authentication-plugin=mysql_native_password

    env:
      # Application configuration for testing
      SPRING_PROFILES_ACTIVE: ci
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/${{ secrets.MYSQL_DATABASE || 'homeserver' }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.MYSQL_USER || 'homeserver_app' }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'test_password_123' }}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
      SPRING_JPA_SHOW_SQL: true
      JWT_SECRET: ${{ secrets.JWT_SECRET || 'test_jwt_secret_for_ci_must_be_at_least_256_bits_long_abcdefghijklmnopqrstuvwxyz123456' }}
      JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION || '86400000' }}
      SERVER_PORT: 8080
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_ADMIN_SECRET: ${{ secrets.NEXT_PUBLIC_ADMIN_SECRET }}
      ADMIN_SECRET: ${{ secrets.ADMIN_SECRET || 'changeme' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright
        working-directory: frontend
        run: npx playwright install

      - name: Install MySQL Client
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq mysql-client

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1" >/dev/null 2>&1; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Setup MySQL user with proper authentication
        run: |
          echo "Setting up MySQL user with proper authentication..."
          mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_ROOT_PASSWORD || 'root_password_123' }} << EOF
          CREATE USER IF NOT EXISTS '$SPRING_DATASOURCE_USERNAME'@'%' IDENTIFIED WITH mysql_native_password BY '$SPRING_DATASOURCE_PASSWORD';
          GRANT ALL PRIVILEGES ON ${{ secrets.MYSQL_DATABASE || 'homeserver' }}.* TO '$SPRING_DATASOURCE_USERNAME'@'%';
          FLUSH PRIVILEGES;
          EOF

      - name: Test database connectivity
        run: |
          # Get the MySQL service container name
          MYSQL_CONTAINER=$(docker ps --filter "ancestor=mysql:8.0" --format "{{.Names}}" | head -1)
          echo "Testing connection to MySQL container: $MYSQL_CONTAINER"

          # Test connection from host
          echo "Testing connection from host:"
          mysql -h 127.0.0.1 -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1 as test_connection;"

          # Test connection from a temporary container on the same network
          echo "Testing connection from container network:"
          docker run --rm --network $(docker inspect $MYSQL_CONTAINER --format='{{range $net, $config := .NetworkSettings.Networks}}{{$net}}{{end}}') \
            mysql:8.0 mysql -h $MYSQL_CONTAINER -u $SPRING_DATASOURCE_USERNAME -p$SPRING_DATASOURCE_PASSWORD -e "SELECT 1 as test_connection;"

      - name: Start backend container
        run: |
          # Get the MySQL service container name
          MYSQL_CONTAINER=$(docker ps --filter "ancestor=mysql:8.0" --format "{{.Names}}" | head -1)
          echo "MySQL container name: $MYSQL_CONTAINER"

          # Connect to the same network as MySQL service
          MYSQL_NETWORK=$(docker inspect $MYSQL_CONTAINER --format='{{range $net, $config := .NetworkSettings.Networks}}{{$net}}{{end}}')
          echo "MySQL network: $MYSQL_NETWORK"

          # Start the backend container using the built image
          docker run -d \
            --name backend-test \
            --network $MYSQL_NETWORK \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILES_ACTIVE \
            -e SPRING_DATASOURCE_URL=jdbc:mysql://$MYSQL_CONTAINER:3306/${{ secrets.MYSQL_DATABASE || 'homeserver' }} \
            -e SPRING_DATASOURCE_USERNAME=$SPRING_DATASOURCE_USERNAME \
            -e SPRING_DATASOURCE_PASSWORD=$SPRING_DATASOURCE_PASSWORD \
            -e SPRING_DATASOURCE_DRIVER_CLASS_NAME=$SPRING_DATASOURCE_DRIVER_CLASS_NAME \
            -e SPRING_JPA_DATABASE_PLATFORM=$SPRING_JPA_DATABASE_PLATFORM \
            -e SPRING_JPA_HIBERNATE_DDL_AUTO=$SPRING_JPA_HIBERNATE_DDL_AUTO \
            -e SPRING_JPA_SHOW_SQL=$SPRING_JPA_SHOW_SQL \
            -e JWT_SECRET=$JWT_SECRET \
            -e JWT_EXPIRATION=$JWT_EXPIRATION \
            -e SERVER_PORT=$SERVER_PORT \
            -e ADMIN_SECRET=$ADMIN_SECRET \
            ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}-backend:${{ github.sha }}

          # Wait for backend to be ready
          echo "Waiting for backend to be ready..."
          for i in {1..60}; do
            if curl -s http://localhost:8080/actuator/health > /dev/null 2>&1; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting for backend... ($i/60)"
            sleep 2
          done

      - name: Start frontend server
        working-directory: frontend
        run: |
          # Build the application first
          npm run build

          # Start the frontend server in the background using standalone server
          npm start &
          FRONTEND_PID=$!
          echo "Frontend server started with PID: $FRONTEND_PID"

          # Wait for frontend to be ready
          echo "Waiting for frontend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "Frontend server is ready!"
              break
            fi
            echo "Waiting for frontend server... ($i/30)"
            sleep 2
          done

          # Store PID for cleanup
          echo $FRONTEND_PID > /tmp/frontend.pid

      - name: Run frontend integration tests
        working-directory: frontend
        run: |
          # Make test scripts executable
          chmod +x ../tests/frontend/*.sh

          # Run frontend tests
          for test in ../tests/frontend/*.sh; do
            echo "Running $test"
            bash "$test"
          done

      - name: Stop frontend server
        if: always()
        run: |
          if [[ -f /tmp/frontend.pid ]]; then
            FRONTEND_PID=$(cat /tmp/frontend.pid)
            echo "Stopping frontend server with PID: $FRONTEND_PID"
            kill $FRONTEND_PID 2>/dev/null || true
            rm -f /tmp/frontend.pid
          fi

      - name: Run Playwright tests
        working-directory: frontend
        run: npx playwright test
        continue-on-error: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

      - name: Cleanup
        if: always()
        run: |
          # Stop and remove backend container
          docker stop backend-test 2>/dev/null || true
          docker rm backend-test 2>/dev/null || true

          # Also stop any remaining frontend server
          if [[ -f /tmp/frontend.pid ]]; then
            FRONTEND_PID=$(cat /tmp/frontend.pid)
            echo "Stopping frontend server with PID: $FRONTEND_PID"
            kill $FRONTEND_PID 2>/dev/null || true
            rm -f /tmp/frontend.pid
          fi

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: [build-images, backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    # Run independently to avoid port conflicts
    env:
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
      NEXT_PUBLIC_ADMIN_SECRET: ${{ secrets.NEXT_PUBLIC_ADMIN_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build application
        working-directory: frontend
        run: npm run build

      - name: Start frontend server
        working-directory: frontend
        run: |
          # Start the frontend server in the background using standalone server
          npm start &
          FRONTEND_PID=$!
          echo "Frontend server started with PID: $FRONTEND_PID"

          # Wait for frontend to be ready
          echo "Waiting for frontend server to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "Frontend server is ready!"
              break
            fi
            echo "Waiting for frontend server... ($i/30)"
            sleep 2
          done

          # Store PID for cleanup
          echo $FRONTEND_PID > /tmp/frontend.pid

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: "./frontend/lighthouserc.js"
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3

      - name: Stop frontend server
        if: always()
        run: |
          if [[ -f /tmp/frontend.pid ]]; then
            FRONTEND_PID=$(cat /tmp/frontend.pid)
            echo "Stopping frontend server with PID: $FRONTEND_PID"
            kill $FRONTEND_PID 2>/dev/null || true
            rm -f /tmp/frontend.pid
          fi
