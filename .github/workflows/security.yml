name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

jobs:
  codeql:
    name: CodeQL Analysis (SAST)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["java", "javascript"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Override default queries with security-and-quality query pack
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better secret detection
          fetch-depth: 0

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-secrets.sarif"
          scanners: "secret"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-secrets.sarif"

#  dependency-check:
#    name: Dependency Vulnerability Scan
#    runs-on: ubuntu-latest
#    permissions:
#      contents: read
#      security-events: write
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: "17"
#          distribution: "temurin"
#
#      - name: Cache Maven packages
#        uses: actions/cache@v4
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#
#      - name: Cache OWASP dependency check data
#        uses: actions/cache@v4
#        with:
#          path: ~/.dependency-check
#          key: ${{ runner.os }}-dependency-check-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-dependency-check
#
#      - name: Run OWASP Dependency Check
#        env:
#          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
#        run: |
#          cd backend
#          mvn org.owasp:dependency-check-maven:check \
#            -DfailBuildOnCVSS=7 \
#            -DsuppressionsLocation=dependency-check-suppressions.xml \
#            -Dformats=ALL \
#            -Dnvd.api.key=${{ secrets.NVD_API_KEY }} \
#            -DretryCount=3 \
#            -DconnectionTimeout=30000 \
#            -DreadTimeout=30000
#
#      - name: Upload dependency check results
#        uses: actions/upload-artifact@v4
#        if: always()
#        with:
#          name: dependency-check-report
#          path: backend/target/dependency-check-report.html
#          retention-days: 30

  docker-security:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t homeserver-backend:test ./backend
          docker build -t homeserver-frontend:test ./frontend

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "homeserver-backend:test"
          format: "sarif"
          output: "trivy-backend.sarif"

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "homeserver-frontend:test"
          format: "sarif"
          output: "trivy-frontend.sarif"

      - name: Upload backend scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-backend.sarif"
          category: "docker-backend"

      - name: Upload frontend scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-frontend.sarif"
          category: "docker-frontend"
