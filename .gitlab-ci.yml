# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

# GitLab CI Pipeline for Home Server
# Uses services for database and runs backend locally for testing

stages:
  - test
  - secret-detection
  - sast

test:
  stage: test
  image: openjdk:17-jdk-slim

  services:
    - mysql:8.0

  variables:
    # MySQL service configuration
    MYSQL_DATABASE: homeserver_test
    MYSQL_USER: homeserver_test
    MYSQL_PASSWORD: test_password
    MYSQL_ROOT_PASSWORD: root_password

    # Application configuration for testing
    SPRING_PROFILES_ACTIVE: test
    SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/homeserver_test
    SPRING_DATASOURCE_USERNAME: homeserver_test
    SPRING_DATASOURCE_PASSWORD: test_password
    SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
    SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
    SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
    SPRING_JPA_SHOW_SQL: true
    JWT_SECRET: test_jwt_secret_for_ci_pipeline_only
    JWT_EXPIRATION: 86400000
    SERVER_PORT: 8080

    # Test configuration
    CI_ENVIRONMENT: "true"
    SERVER_URL: http://localhost:8080/actuator/health
    MAX_WAIT_SECONDS: 120

  before_script: |
    set -e

    # Install required packages
    apt-get update -qq && apt-get install -y -qq curl wget
    apt-get install -y -qq default-mysql-client || apt-get install -y -qq mariadb-client || echo "Warning: MySQL client not installed"

    # Install Maven
    wget https://dlcdn.apache.org/maven/maven-3/3.9.10/binaries/apache-maven-3.9.10-bin.tar.gz
    tar -xzf apache-maven-3.9.10-bin.tar.gz
    mv apache-maven-3.9.10 /opt/maven
    export PATH=/opt/maven/bin:$PATH
    export MAVEN_HOME=/opt/maven

    # Wait for MySQL to be ready
    echo "Waiting for MySQL to be ready..."
    for i in {1..30}; do
      if command -v mysql >/dev/null && mysql -h mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1" >/dev/null 2>&1; then
        echo "MySQL is ready!"
        break
      elif ! command -v mysql >/dev/null; then
        echo "MySQL client not available, testing with curl..."
        if timeout 5 bash -c "</dev/tcp/mysql/3306" >/dev/null 2>&1; then
          echo "MySQL port is open!"
          break
        fi
      fi
      echo "Waiting for MySQL... ($i/30)"
      sleep 2
    done

    # Initialize database (only if mysql client is available)
    if command -v mysql >/dev/null; then
      mysql -h mysql -u root -p$MYSQL_ROOT_PASSWORD < db/init.sql
    else
      echo "Warning: MySQL client not available, skipping database initialization"
      echo "The application will need to handle schema creation via JPA"
    fi

    # Make scripts executable
    chmod +x run-test.sh tests/backend/01-succeed.sh

    # Verify setup
    echo "=== Environment ==="
    echo "Java version:" && java -version
    echo "Maven version:" && mvn --version
    if command -v mysql >/dev/null; then
      echo "MySQL connection test:"
      mysql -h mysql -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 'Connection successful'" $MYSQL_DATABASE
    else
      echo "MySQL client not available, skipping connection test"
    fi

  script:
    - export PATH=/opt/maven/bin:$PATH
    - export MAVEN_HOME=/opt/maven
    - ./run-test-ci.sh

  artifacts:
    reports:
      junit: backend/target/surefire-reports/TEST-*.xml
    when: always
    expire_in: 1 week

secret_detection:
  stage: secret-detection

sast:
  stage: sast

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

variables:
  SECRET_DETECTION_ENABLED: "true"
